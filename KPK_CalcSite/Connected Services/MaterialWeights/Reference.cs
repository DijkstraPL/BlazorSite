//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KPK_CalcSite.MaterialWeights {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MaterialWeight", Namespace="http://schemas.datacontract.org/2004/07/WCF_SOAP_REST_Service")]
    [System.SerializableAttribute()]
    public partial class MaterialWeight : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MatWeightNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaximumWeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MinimumWeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MatWeightNo {
            get {
                return this.MatWeightNoField;
            }
            set {
                if ((this.MatWeightNoField.Equals(value) != true)) {
                    this.MatWeightNoField = value;
                    this.RaisePropertyChanged("MatWeightNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialName {
            get {
                return this.MaterialNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialNameField, value) != true)) {
                    this.MaterialNameField = value;
                    this.RaisePropertyChanged("MaterialName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaximumWeight {
            get {
                return this.MaximumWeightField;
            }
            set {
                if ((this.MaximumWeightField.Equals(value) != true)) {
                    this.MaximumWeightField = value;
                    this.RaisePropertyChanged("MaximumWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinimumWeight {
            get {
                return this.MinimumWeightField;
            }
            set {
                if ((this.MinimumWeightField.Equals(value) != true)) {
                    this.MinimumWeightField = value;
                    this.RaisePropertyChanged("MinimumWeight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MaterialWeights.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMaterialWeights", ReplyAction="http://tempuri.org/IService/GetMaterialWeightsResponse")]
        KPK_CalcSite.MaterialWeights.MaterialWeight[] GetMaterialWeights();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMaterialWeights", ReplyAction="http://tempuri.org/IService/GetMaterialWeightsResponse")]
        System.Threading.Tasks.Task<KPK_CalcSite.MaterialWeights.MaterialWeight[]> GetMaterialWeightsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertMaterialWeight", ReplyAction="http://tempuri.org/IService/InsertMaterialWeightResponse")]
        int InsertMaterialWeight(KPK_CalcSite.MaterialWeights.MaterialWeight materialWeight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertMaterialWeight", ReplyAction="http://tempuri.org/IService/InsertMaterialWeightResponse")]
        System.Threading.Tasks.Task<int> InsertMaterialWeightAsync(KPK_CalcSite.MaterialWeights.MaterialWeight materialWeight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectMaterialWeight", ReplyAction="http://tempuri.org/IService/SelectMaterialWeightResponse")]
        KPK_CalcSite.MaterialWeights.MaterialWeight SelectMaterialWeight(int matWeightNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectMaterialWeight", ReplyAction="http://tempuri.org/IService/SelectMaterialWeightResponse")]
        System.Threading.Tasks.Task<KPK_CalcSite.MaterialWeights.MaterialWeight> SelectMaterialWeightAsync(int matWeightNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateMaterialWeight", ReplyAction="http://tempuri.org/IService/UpdateMaterialWeightResponse")]
        int UpdateMaterialWeight(int matWeightNo, KPK_CalcSite.MaterialWeights.MaterialWeight materialWeight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateMaterialWeight", ReplyAction="http://tempuri.org/IService/UpdateMaterialWeightResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialWeightAsync(int matWeightNo, KPK_CalcSite.MaterialWeights.MaterialWeight materialWeight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteMaterialWeight", ReplyAction="http://tempuri.org/IService/DeleteMaterialWeightResponse")]
        int DeleteMaterialWeight(int matWeightNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteMaterialWeight", ReplyAction="http://tempuri.org/IService/DeleteMaterialWeightResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialWeightAsync(int matWeightNo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : KPK_CalcSite.MaterialWeights.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<KPK_CalcSite.MaterialWeights.IService>, KPK_CalcSite.MaterialWeights.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public KPK_CalcSite.MaterialWeights.MaterialWeight[] GetMaterialWeights() {
            return base.Channel.GetMaterialWeights();
        }
        
        public System.Threading.Tasks.Task<KPK_CalcSite.MaterialWeights.MaterialWeight[]> GetMaterialWeightsAsync() {
            return base.Channel.GetMaterialWeightsAsync();
        }
        
        public int InsertMaterialWeight(KPK_CalcSite.MaterialWeights.MaterialWeight materialWeight) {
            return base.Channel.InsertMaterialWeight(materialWeight);
        }
        
        public System.Threading.Tasks.Task<int> InsertMaterialWeightAsync(KPK_CalcSite.MaterialWeights.MaterialWeight materialWeight) {
            return base.Channel.InsertMaterialWeightAsync(materialWeight);
        }
        
        public KPK_CalcSite.MaterialWeights.MaterialWeight SelectMaterialWeight(int matWeightNo) {
            return base.Channel.SelectMaterialWeight(matWeightNo);
        }
        
        public System.Threading.Tasks.Task<KPK_CalcSite.MaterialWeights.MaterialWeight> SelectMaterialWeightAsync(int matWeightNo) {
            return base.Channel.SelectMaterialWeightAsync(matWeightNo);
        }
        
        public int UpdateMaterialWeight(int matWeightNo, KPK_CalcSite.MaterialWeights.MaterialWeight materialWeight) {
            return base.Channel.UpdateMaterialWeight(matWeightNo, materialWeight);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialWeightAsync(int matWeightNo, KPK_CalcSite.MaterialWeights.MaterialWeight materialWeight) {
            return base.Channel.UpdateMaterialWeightAsync(matWeightNo, materialWeight);
        }
        
        public int DeleteMaterialWeight(int matWeightNo) {
            return base.Channel.DeleteMaterialWeight(matWeightNo);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialWeightAsync(int matWeightNo) {
            return base.Channel.DeleteMaterialWeightAsync(matWeightNo);
        }
    }
}
